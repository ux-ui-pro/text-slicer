{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["class TextSlicer {\n  private readonly textElement: HTMLElement | null;\n  private originalText: string;\n  private readonly splitMode: 'words' | 'chars' | 'both';\n  private readonly cssVariables: boolean;\n  private readonly dataAttributes: boolean;\n  private charIndexCounter: number;\n\n  public constructor(options: {\n    container?: HTMLElement | string;\n    splitMode?: 'words' | 'chars' | 'both';\n    cssVariables?: boolean;\n    dataAttributes?: boolean;\n  } = {}) {\n    this.textElement =\n      options.container instanceof HTMLElement\n        ? options.container\n        : document.querySelector(options.container || '.text-slicer');\n\n    if (!this.textElement) {\n      this.originalText = '';\n      this.splitMode = 'both';\n      this.cssVariables = false;\n      this.dataAttributes = false;\n      this.charIndexCounter = 0;\n      return;\n    }\n\n    this.originalText = this.textElement.textContent?.trim() || '';\n    this.splitMode = options.splitMode || 'both';\n    this.cssVariables = options.cssVariables || false;\n    this.dataAttributes = options.dataAttributes || false;\n    this.charIndexCounter = 0;\n  }\n\n  public split(): void {\n    if (!this.textElement) return;\n\n    this.clear();\n    this.charIndexCounter = 0;\n\n    const fragment = document.createDocumentFragment();\n    const words = this.originalText.split(' ');\n    const charCount = this.originalText.length;\n\n    if (this.splitMode === 'words' || this.splitMode === 'both') {\n      this.splitWords(fragment, words);\n    } else if (this.splitMode === 'chars') {\n      this.splitChars(fragment);\n    }\n\n    this.textElement.appendChild(fragment);\n\n    if (this.cssVariables) {\n      this.textElement.style.setProperty('--word-total', words.length.toString());\n      this.textElement.style.setProperty('--char-total', charCount.toString());\n    }\n  }\n\n  private splitWords(fragment: DocumentFragment, words: string[]): void {\n    words.forEach((word, wordIndex) => {\n      if (this.splitMode === 'both') {\n        const wordSpan = this.createWordSpan(wordIndex, word);\n\n        word.split('').forEach((char) => {\n          const charSpan = this.createCharSpan(char);\n          wordSpan.append(charSpan);\n        });\n\n        fragment.append(wordSpan);\n      } else {\n        const wordSpan = this.createWordSpan(wordIndex);\n        wordSpan.append(document.createTextNode(word));\n        fragment.append(wordSpan);\n      }\n\n      if (wordIndex < words.length - 1) {\n        fragment.append(TextSlicer.createSpaceSpan());\n      }\n    });\n  }\n\n  private splitChars(fragment: DocumentFragment): void {\n    this.originalText.split('').forEach((char) => {\n      const charSpan = this.createCharSpan(char);\n      fragment.append(charSpan);\n    });\n  }\n\n  private createWordSpan(index: number, word: string = ''): HTMLElement {\n    const wordSpan = document.createElement('span');\n    wordSpan.classList.add('word');\n\n    if (this.dataAttributes) {\n      wordSpan.setAttribute('data-word', word);\n    }\n\n    if (this.cssVariables) {\n      wordSpan.style.setProperty('--word-index', index.toString());\n    }\n\n    return wordSpan;\n  }\n\n  private createCharSpan(char: string): HTMLElement {\n    const charSpan = document.createElement('span');\n    charSpan.textContent = char;\n\n    if (this.dataAttributes) {\n      charSpan.setAttribute('data-char', char);\n    }\n\n    if (char === ' ') {\n      charSpan.classList.add('whitespace');\n    } else {\n      charSpan.classList.add('char');\n\n      if (this.cssVariables) {\n        charSpan.style.setProperty('--char-index', this.charIndexCounter.toString());\n      }\n\n      this.charIndexCounter += 1;\n    }\n\n    return charSpan;\n  }\n\n  private static createSpaceSpan(): HTMLElement {\n    const spaceSpan = document.createElement('span');\n    spaceSpan.classList.add('whitespace');\n    spaceSpan.textContent = ' ';\n\n    return spaceSpan;\n  }\n\n  private clear(): void {\n    if (this.textElement) {\n      this.textElement.innerHTML = '';\n    }\n  }\n\n  public init(): void {\n    this.split();\n  }\n}\n\nexport default TextSlicer;\n"],"names":[],"version":3,"file":"index.js.map"}