{"mappings":"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","sources":["src/TextSlicer.js"],"sourcesContent":["class TextSlicer {\n  #textElement;\n\n  #originalText;\n\n  #splitMode;\n\n  #cssVariables;\n\n  #dataAttributes;\n\n  #charIndexCounter;\n\n  /**\n   * @param {Object} options - Configuration options for the TextSlicer.\n   * @param {HTMLElement|string} [options.container] - The container element or a selector for the text to split.\n   * @param {string} [options.splitMode='both'] - The splitMode, can be 'words', 'chars', or 'both'.\n   * @param {boolean} [options.cssVariables=false] - Whether to use CSS variables for indices.\n   * @param {boolean} [options.dataAttributes=false] - Whether to add data attributes for words and chars.\n   */\n\n  constructor(options = {}) {\n    this.#textElement = options.container instanceof HTMLElement\n      ? options.container\n      : document.querySelector(options.container || '.text-slicer');\n\n    if (!this.#textElement) {\n      return;\n    }\n\n    this.#originalText = this.#textElement.textContent.trim();\n    this.#splitMode = options.splitMode || 'both';\n    this.#cssVariables = options.cssVariables || false;\n    this.#dataAttributes = options.dataAttributes || false;\n    this.#charIndexCounter = 0;\n  }\n\n  split() {\n    if (!this.#textElement) return;\n\n    this.#clear();\n    this.#charIndexCounter = 0;\n\n    const fragment = document.createDocumentFragment();\n    const words = this.#originalText.split(' ');\n    const charCount = this.#originalText.length;\n\n    if (this.#splitMode === 'words' || this.#splitMode === 'both') {\n      this.#splitWords(fragment, words);\n    } else if (this.#splitMode === 'chars') {\n      this.#splitChars(fragment);\n    }\n\n    this.#textElement.appendChild(fragment);\n\n    if (this.#cssVariables) {\n      this.#textElement.style.setProperty('--word-total', words.length);\n      this.#textElement.style.setProperty('--char-total', charCount);\n    }\n  }\n\n  #splitWords(fragment, words) {\n    words.forEach((word, wordIndex) => {\n      if (this.#splitMode === 'both') {\n        const wordSpan = this.#createWordSpan(wordIndex, word);\n\n        word.split('').forEach((char) => {\n          const charSpan = this.#createCharSpan(char);\n\n          wordSpan.append(charSpan);\n        });\n\n        fragment.append(wordSpan);\n      } else {\n        const wordSpan = this.#createWordSpan(wordIndex);\n\n        wordSpan.append(document.createTextNode(word));\n        fragment.append(wordSpan);\n      }\n\n      if (wordIndex < words.length - 1) {\n        fragment.append(TextSlicer.#createSpaceSpan());\n      }\n    });\n  }\n\n  #splitChars(fragment) {\n    this.#originalText.split('').forEach((char) => {\n      const charSpan = this.#createCharSpan(char);\n\n      fragment.append(charSpan);\n    });\n  }\n\n  #createWordSpan(index, word = '') {\n    const wordSpan = document.createElement('span');\n\n    wordSpan.classList.add('word');\n\n    if (this.#dataAttributes) {\n      wordSpan.setAttribute('data-word', word);\n    }\n\n    if (this.#cssVariables) {\n      wordSpan.style.setProperty('--word-index', index);\n    }\n\n    return wordSpan;\n  }\n\n  #createCharSpan(char) {\n    const charSpan = document.createElement('span');\n\n    charSpan.textContent = char;\n\n    if (this.#dataAttributes) {\n      charSpan.setAttribute('data-char', char);\n    }\n\n    if (char === ' ') {\n      charSpan.classList.add('whitespace');\n    } else {\n      charSpan.classList.add('char');\n\n      if (this.#cssVariables) {\n        charSpan.style.setProperty('--char-index', this.#charIndexCounter);\n      }\n\n      this.#charIndexCounter += 1;\n    }\n\n    return charSpan;\n  }\n\n  static #createSpaceSpan() {\n    const spaceSpan = document.createElement('span');\n\n    spaceSpan.classList.add('whitespace');\n    spaceSpan.textContent = ' ';\n\n    return spaceSpan;\n  }\n\n  #clear() {\n    this.#textElement.innerHTML = '';\n  }\n\n  init() {\n    this.split();\n  }\n}\n\nexport default TextSlicer;\n"],"names":[],"version":3,"file":"index.js.map"}